一、优化流程一般分为三个阶段。
    阶段一：直接按照需要用C语言实现功能。在实际的DSP应用中，许多算法直接用汇编代码编写，虽然优化效率很高，可是实现的难度却很大，
            所以一般先用C语言来实现，然后编译运行，利用C64X开发环境的profile; clock工具测试程序运行时间，若不能满足要求，则进行第二阶段。

    阶段二：C语言级的优化。选择C64X开发环境提供的优化方式以及充分运用其他技巧，优化C代码，若还不能满足效率要求，则进行第三步。

    阶段三：汇编级的优化。将上一阶段C程序中优化效率较低的部分提出来，用线性汇编语言编写，利用汇编优化器进行优化。
    汇编优化器的作用是让开发人员在不考虑C64X流水线结构和分配其内部寄存器的情况下，
    编写线形汇编语言程序，然后汇编优化器通过分配寄存器和循环优化将汇编语言程序转化为利用流水线方式的高速并行汇编程序。
    上述的三个阶段不是都必须经过，当在某一阶段获得了期望的性能，就不必进行下一阶段的优化。
    
    二、选用C编译器提供的优化选项

● -o：使能软件流水和其他优化方法

● -pm：使能程序级优化

● -mt：使能编译器假设程序中没有数据存储混淆，可进一步优化代码。

● -mg：使能分析（profile）优化代码

● -ms：确保不产生冗余循环，从而减小代码尺寸

● -mh：允许投机执行

● -mx：使能软件流水循环重试，基于循环次数对循环试用多个方案，以便选择最佳方案。


三、减小存储器相关性为使指令达到最大效率

  C64X编译器尽可能将指令安排为并行执行。为使指令并行操作，编译器必须知道指令间的关系，因为只有不相关的指令才可以并行执行。当编译器不能确定两条指令是否相关时，则编译器假定它们是相关的，从而不能并行执行。设计中常采用关键字const来指定目标，const表示一个变量或一个变量的存储单元保持不变。因此，在代码中加入关键字const，可以去除指令间的相关性。例如下面的程序：

void vecsum(short *sum,short*in1,short*in2,unsigned int N)

{ int i;

  for(i=0;i&lt;N;i++)

      sum[i]=in1[i]+in2[i];

}

 

写sum可能对指针in1、in2所指向的地址有影响，从而in1和in2的读操作必须等到写sum操作完成之后才能进行，降低了流水效率，为帮助编译器确定存储器的相关性，使用const关键字来指定一个目标，上面的源程序可改为含关键字const的优化源代码：

void vecsum(short *sum, const short*in1,const short*in2,unsigned int N)

{ int i;

    for(i=0;i&lt;N;i++)

     sum[i]=in1[i]+in2[i];

}

由于使用了关键字const，消除了指令之间的相关路径，从而使编译器能够判别内存操作之间的相关性，找到更好的指令执行方案。

 

四、 使用内联函数（intrinsics）

    内联函数是C64X编译器提供的专门函数，它们与嵌入式的汇编指令是一一对应的，其目的是快速优化C源程序。在源程序中调用内联函数，与调用一般的函数相同，只不过内联函数名称前有下划线作特殊标识。当汇编指令功能不易采用C语言表达时，可采用内联函数表示。例如在定点运算中经常要求出源操作数的冗余符号位数，这一功能如果用C完成的话，需要的源程序代码冗长，有较多的逻辑操作和判断跳转，运行效率低下。若用内联函数，则是result =_norm(src1)，减少了代码长度，提高了运行效率。因此对于需要大量C代码才能表示的复杂功能，应该尽量用C64X的内联函数来表示。

 

五、short型数据的int处理

  C64XDSP具有双16bit扩充功能，芯片能在一个周期内完成双16bit的乘法、加减法、比较、移位等操作。在设计时，当对连续的short型数据流操作时，应该转化成对int型数据流的操作，这样一次可以把两个16位的数据读入一个32位的寄存器，然后用内部函数来对它们处理（如_sub2等），充分运用双16bit扩充功能，一次可以进行两个16bit数据的运算，速度将提升一倍。

 

六、尽量少进行函数调用

  函数调用的时候，要将PC和一些寄存器压栈保存，函数返回时，则将这些寄存器出栈返回，增加了一些不必要的操作。所以一些小的函数，最好是用适当的内联函数代替直接写入主函数里，一些调用不多的函数，也可以直接写入主函数内，这样可减少不必要的操作，提高速度。但是这样往往会增加程序的长度，因此是一种利用空间换取时间的办法。

 

七、 尽量使用逻辑运算代替乘除运算

  在DSP里，乘除运算指令的执行时间要远远超过逻辑移位指令，尤其是除法指令，在设计的时候，可以根据实际情况，进行一些调整，尽量用逻辑移位运算来代替乘除运算，这样可以加快指令的运行时间。
  
八、软件流水线技术的使用

  软件流水线技术用来对一个循环结构的指令进行调度安排，使之成为多重迭代循环并行执行。在编译代码时，可以选择编译器的-o2或-o3选项，则编译器将根据程序尽可能地安排软件流水线。在DSP算法中存在大量的循环操作，因此充分地运用软件流水线方式，能极大地提高程序的运行速度。但使用软件流水线还有下面几点限制：

● 循环结构不能包含代码调用，但可以包含内联函数。

● 循环计数器应该是递减的。

● 循环结构不能包含break，if语句不能嵌套，条件代码应当尽量的简单。

● 循环结构中不要包含改变循环计数器的代码。

● 循环体代码不能过长，因为寄存器（32个）的数量有限，应该分解为多个循环。

  在软件流水线的运用上，应该尽量使复杂的循环分解成简单的小循环，以避免寄存器的数量不够；对于过于简单的循环，应该适当的展开，以增加代码数量，增加流水线中的迭代指令。

 

九、 采用指令乱序技术

 

    程序中，有些指令的执行顺序没有严格的要求，可以作出一些位置上的调整，因此可以适当的调整这些指令的位置，穿插于其他的指令之中，从而减小指令的相关性，增加运行时的并行性。尤其在循环里，当循环体较小的时候，可以把多个循环的代码写在一个循环体里，合并成一个循环，从而减小循环内指令的相关性，增加指令运行的并行性。但是要注意不要使循环过于复杂，以至不能进行软件流水线的优化。
  
