一、输入一个数，将其逆序后输出，例如输入536789.3245，输出5423.987635

#include <bits/stdc++.h>
using namespace std;

double cal(double t){
    vector<int>v;
    vector<int>s;
    int t1 = int(t);
    t -= t1;

    do{
        v.push_back(t1%10);
        t1 /= 10;
    }while(t1);
    double res = 0;
    int i=v.size()-1;
    while(i>=0){
        res *= 0.1;
        res += v[i];
        i--;
    }
    res *= 0.1;


    while(t < 1)    t *= 10;
    while(t - int(t) >= 0.0000001){
        t *= 10;
    }
    int k = int(t);
    do{
        s.push_back(k%10);
        k /= 10;
    }while(k);
    double res1 = 0;
    i=0;
    while(i<s.size()){
        res1 *= 10;
        res1 += s[i];
        i++;
    }
    double e = res+res1;
    cout<<res+res1<<endl;
    cout<<e<<endl;
    return e;
}

int main( )
{
    vector<double>v={3784.43784}; //654.567
    for (int i = 0; i < v.size(); ++i) {
        cout<<cal(v[i])<<endl;
    }
    return 0;
}


二、在不使用第三个参数的情况下，交换两个变量的值；



三、问题描述
给定两个字符串str1和str2,输出两个字符串的最长公共子串
题目保证str1和str2的最长公共子串存在且唯一。 

数据范围： 1≤∣str1∣,∣str2∣≤5000
要求： 空间复杂度 O(n^2)，时间复杂度 O(n^2)
示例1
输入：
"1AB2345CD","12345EF"
复制
返回值：
"2345"



四、问题描述
假设你有一个数组prices，长度为n，其中prices[i]是某只股票在第i天的价格，请根据这个价格数组，返回买卖股票能获得的最大收益
1. 你可以多次买卖该只股票，但是再次购买前必须卖出之前的股票
2. 如果不能获取收益，请返回0
3. 假设买入卖出均无手续费

数据范围： 1、 1≤n≤1×10^5 1≤prices[i]≤10^4
 
要求：空间复杂度 O(n，时间复杂度 O(n)
进阶：空间复杂度 O(1)，时间复杂度 O(n)

示例1：输入：
[8,9,2,5,4,7,1]
返回值：
7

说明：
在第1天(股票价格=8)买入，第2天(股票价格=9)卖出，获利9-8=1
在第3天(股票价格=2)买入，第4天(股票价格=5)卖出，获利5-2=3
在第5天(股票价格=4)买入，第6天(股票价格=7)卖出，获利7-4=3
总获利1+3+3=7，返回7

示例2：
输入：
[5,4,3,2,1]
返回值：
0
说明：
由于每天股票都在跌，因此不进行任何交易最优。最大收益为0

示例3：
输入：
[1,2,3,4,5]
返回值：
4
说明：
第一天买进，最后一天卖出最优。中间的当天买进当天卖出不影响最终结果。最大收益为4。


#include<bits/stdc++.h>
 using namespace std;

int getMax(vector<int>& prices){
    int m = prices.size();
    int dp[m][2];
    dp[0][0] = 0, dp[0][1] = -prices[0];
    for(int i = 1; i < m; ++i){
        // 卖出
        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
        // 买入
        dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
    }
    return dp[m - 1][0];

}
 int main(){
    vector<int> v = {8, 9, 2, 5, 4, 7, 1};
    vector<int> v2 = {5, 4, 3, 2, 1};
    vector<int> v3 = {1, 2, 3, 4, 5};

    int ans = getMax(v);
    int ans2 = getMax(v2);
    int ans3 = getMax(v3);


    cout << ans << " " << ans2 << " " << ans3 <<endl;
 }



